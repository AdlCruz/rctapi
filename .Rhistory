"SeriousEventOrganSystem",
"SeriousEventSourceVocabulary",
"SeriousEventStatsGroupId",
"SeriousEventStatsNumAffected",
"SeriousEventStatsNumAtRisk",
"SeriousEventStatsNumEvents",
"SeriousEventTerm",
"StartDate",
"StartDateType",
"StatusVerifiedDate",
"StdAge",
"StudyFirstPostDate",
"StudyFirstPostDateType",
"StudyFirstSubmitDate",
"StudyFirstSubmitQCDate",
"StudyPopulation",
"StudyType",
"TargetDuration",
"UnpostedEventDate",
"UnpostedEventType",
"UnpostedResponsibleParty",
"VersionHolder",
"WhyStopped")
length(all_fields)
some_study_fields <- get_study_fields(expr,basic_info_fields,50,"json")
View(some_study_fields)
json_handler <- function(url) {
# decodes json content in response, returns decoded json with full response information
## this one needs no error because eventual error is with request, if request
dec_content <- jsonlite::fromJSON(content(request_ct(url), "text"), simplifyVector = TRUE)
decoded_response <- dec_content[[1]]
return(decoded_response)
}
csv_handler <- function(url) {
# decodes csv content in response, returns dataframe with study fields
response <- request_ct(url)
con <- content(response,"text")
split_hdrs <- stri_split(con,regex = "\\n\\s*\\n")
split_lines  <- stri_split_regex(split_hdrs[[1]],"\\n")
records  <- read_csv(split_lines[[2]])
return(records)
}
full_studies <- get_full_studies(expr,5)
View(full_studies)
?from_json()
?from_json
from_JSON
?from_JSON
library(jsonlite)
?fromJSON
flat_full <- flatten(full_studies)
flat_full <- flatten(full_studies$FullStudies)
View(flat_full)
str(flat_full)
dim(flat_full)
get_full_studies <- function(search_expr, max_studies = 30, return_flat = TRUE){
# gets full study information on valid query
# tryCatch
# search_expr is before max_rank and after expr=
# did not work without substituting spaces for + becasue ASCII, will only take all ASCII chars
# consider adding logical arg that signals if the return should be oparsed or not, you lose some info but save  step
req <- glue("full_studies?expr={search_expr}&max_rnk={max_studies}&{fmt_json}")
url <- glue("{b_url}{b_query}{req}")
if (return_flat == TRUE){
records <- full_studies_parser(json_handler(url))
return(records)
}
else
return (json_handler((url)))
}
full_studies_parser <- function(get_full_studies) {
# transforms get_full_studies_response() into table format: each study a row, each field a column
# each study response has 322 potential fields
full_studies <- get_full_studies$FullStudies
flat_full_studies <- flatten(full_studies,recursive = TRUE)
return(flat_full_studies)
}
full_studies <- get_full_studies(expr,5)
View(full_studies)
full_studies <- get_full_studies(expr,5,return_flat = FALSE)
View(full_studies)
some_study_fields <- get_study_fields(expr,basic_info_fields,50,"json")
View(some_study_fields)
get_study_fields <- function(search_expr, fields, max_studies = 50, format = "csv", just_fields = TRUE) {
# need error for wrong fields
# no errors in params expr, fields, max_studies then
concat_fields <- paste(fields,collapse = "%2C")
req <- glue("study_fields?expr={search_expr}&max_rnk={max_studies}&fields={concat_fields}")
if (format =="csv") {
url <- glue("{b_url}{b_query}{req}&{fmt_csv}")
records <- csv_handler(url)
return(records)
}
else if (format=="json") {
url <- glue("{b_url}{b_query}{req}&{fmt_json}")
if (just_fields == TRUE) {
decoded_content <- json_handler(url)
records <- decoded_content$StudyFields
return(records)
}
else {return(json_handler(url))}
}
# else {
#   raise an error "Format argument has to be either 'json' or 'csv'"
# }
}
some_study_fields <- get_study_fields(expr,basic_info_fields,50,"json", just_fields = TRUE)
View(some_study_fields)
View(split_lines)
results_info_fields <- list("NCTId","OutcomeAnalysisGroupId","OutcomeAnalysisGroupDescription",
"OutcomeAnalysisNonInferiorityType","OutcomeAnalysisTestedNonInferiority",
"OutcomeAnalysisNonInferiorityComment","OutcomeAnalysisPValue",
"OutcomeAnalysisPValueComment","OutcomeAnalysisStatisticalMethod",
"OutcomeAnalysisStatisticalComment","OutcomeAnalysisParamType",
"OutcomeAnalysisParamValue","OutcomeAnalysisCIPctValue","OutcomeAnalysisCINumSides",
"OutcomeAnalysisCILowerLimit","OutcomeAnalysisCIUpperLimit",
"OutcomeAnalysisDispersionType","OutcomeAnalysisDispersionValue",
"OutcomeAnalysisEstimateComment","OutcomeAnalysisOtherAnalysisDescription")
length(results_info_fields)
study_fields <- get_study_fields(expr,results_info_fields)
View(study_fields)
?cbind
study_fields_bind <- function(df1,df2) {
# max queried fields is 20, function could bind
# together different queries of same expression to obtain more fields
new_df <- cbind(df1,df2)
return(new_df)
}
?merge
result_fields <- get_study_fields(expr,results_info_fields)
basic_fields <- get_study_fields(expr,basic_info_fields)
new_df <- merge(result_fields,basic_fields, by = "NCTId")
View(new_df)
new_df <- merge(result_fields,basic_fields)
View(new_df)
O_fields <- list("NCTId","OutcomeMeasureType","OutcomeMeasureTitle","OutcomeMeasureDescription",
"OutcomeMeasureTimeFrame","OutcomeMeasureAnticipatedPostingDate","OutcomeGroupTitle",
"OutcomeGroupDescription","OutcomeDenomCountValue","OutcomeMeasureTypeUnitsAnalyzed",
"OutcomeDenomUnits","OutcomeMeasurePopulationDescription","OutcomeMeasureParamType",
"OutcomeMeasureDispersionType","OutcomeCategoryTitle","OutcomeClassTitle",
"OutcomeClassDenomCountValue","OutcomeClassDenomUnits","OutcomeMeasurementValue",
"OutcomeMeasureUnitOfMeasure")
length(O_fields)
request_ct <- function(url) {
# requests API and returns response
## useful request/response error
final_url <- gsub(" ","+",url)
response <- httr::GET(final_url)
return(response)
}
json_handler <- function(url) {
# decodes json content in response, returns decoded json with full response information
## this one needs no error because eventual error is with request, if request
dec_content <- jsonlite::fromJSON(content(request_ct(url), "text"), simplifyVector = TRUE)
decoded_response <- dec_content[[1]]
return(decoded_response)
}
csv_handler <- function(url) {
# decodes csv content in response, returns dataframe with study fields
response <- request_ct(url)
con <- content(response,"text")
split_hdrs <- stri_split(con,regex = "\\n\\s*\\n")
split_lines  <- stri_split_regex(split_hdrs[[1]],"\\n")
records  <- read_csv(split_lines[[2]])
return(records)
}
library(glue)
b_url <- "https://clinicaltrials.gov/api/"
b_info = "info/"
b_query = "query/"
fmt_json = "fmt=json"
fmt_csv = "fmt=csv"
study_fields <- function() {
# returns study fields list
fields_list <- json_handler(glue("{b_url}{b_info}study_fields_list?{fmt_json}"))
return(fields_list$StudyFields$Fields)
}
library(httr)
library(jsonlite)
library(readr)
# library(stringr)
library(stringi)
# library(utf8)
study_fields()
library(glue)
b_url <- "https://clinicaltrials.gov/api/"
b_info = "info/"
b_query = "query/"
fmt_json = "fmt=json"
fmt_csv = "fmt=csv"
study_fields <- function() {
# returns study fields list
fields_list <- json_handler(glue("{b_url}{b_info}study_fields_list?{fmt_json}"))
return(fields_list$StudyFields$Fields)
}
study_fields()
api_info <- function() {
# returns last update and version
last_updated <- json_handler(glue("{b_url}{b_info}data_vrs?{fmt_json}"))
api_version <- json_handler(glue("{b_url}{b_info}api_vrs?{fmt_json}"))
api_info <- c(last_updated,api_version)
return(api_info)
}
api_info()
get_full_studies <- function(search_expr, max_studies = 30, return_flat = TRUE){
# gets full study information on valid query
# tryCatch
# search_expr is before max_rank and after expr=
# did not work without substituting spaces for + becasue ASCII, will only take all ASCII chars
# consider adding logical arg that signals if the return should be oparsed or not, you lose some info but save  step
req <- glue("full_studies?expr={search_expr}&max_rnk={max_studies}&{fmt_json}")
url <- glue("{b_url}{b_query}{req}")
if (return_flat == TRUE){
records <- full_studies_parser(json_handler(url))
return(records)
}
else {return (json_handler((url)))}
}
get_study_fields <- function(search_expr, fields, max_studies = 50, format = "csv", just_fields = TRUE) {
# need error for wrong fields
# no errors in params expr, fields, max_studies then
concat_fields <- paste(fields,collapse = "%2C")
req <- glue("study_fields?expr={search_expr}&max_rnk={max_studies}&fields={concat_fields}")
if (format =="csv") {
url <- glue("{b_url}{b_query}{req}&{fmt_csv}")
records <- csv_handler(url)
return(records)
}
else if (format=="json") {
url <- glue("{b_url}{b_query}{req}&{fmt_json}")
if (just_fields == TRUE) {
decoded_content <- json_handler(url)
records <- decoded_content$StudyFields
return(records)
}
else {return(json_handler(url))}
}
# else {
#   raise an error "Format argument has to be either 'json' or 'csv'"
# }
}
full_studies_parser <- function(get_full_studies) {
# transforms get_full_studies_response() into table format: each study a row, each field a column
# each study response has 322 potential fields
full_studies <- get_full_studies$FullStudies
flat_full_studies <- flatten(full_studies,recursive = TRUE)
return(flat_full_studies)
}
study_fields_merge <- function(df1,df2) {
# max queried fields is 20, function could bind
# together different queries of same expression to obtain more fields
# arguments are dataframes and maybe the number of elements to join to mn#ake looping easier?
new_df <- merge(df1,df2, by = "NCTId")
return(new_df)
}
study_fields_merge <- function(df1,df2) {
# max queried fields is 20, function could bind
# together different queries of same expression to obtain more fields
# arguments are dataframes and maybe the number of elements to join to mn#ake looping easier?
new_df <- merge(df1,df2, by = "NCTId")
return(new_df)
}
expr <- "AREA[Condition]Psoriatic arthritis AND TILT[BriefSummary]mild AND AREA[DesignPrimaryPurpose]Treatment AND AREA[InterventionType](Drug OR Biological) NOT AREA[DesignInterventionModel]Single Group Assignment"
fields <- list("NCTId","Condition","PrimaryOutcomeMeasure","OutcomeAnalysisCILowerLimit","OverallStatus")
full_studies <- get_full_studies(expr, max_studies = 30, return_flat = TRUE)
View(full_studies)
basic_fields <- get_study_fields(expr,basic_info_fields, max_studies = 50, format = "csv", just_fields = TRUE)
basic_info_fields <-list("NCTId","OverallStatus","CompletionDate","StudyType","BriefTitle",
"BriefSummary","Keyword","EnrollmentCount","EligibilityCriteria",
"LocationCountry","Condition","DesignAllocation","DesignPrimaryPurpose",
"DesignInterventionModel","ArmGroupLabel","ArmGroupType","InterventionType",
"InterventionName","InterventionDescription","PrimaryOutcomeMeasure")
results_info_fields <- list("NCTId","OutcomeAnalysisGroupId","OutcomeAnalysisGroupDescription",
"OutcomeAnalysisNonInferiorityType","OutcomeAnalysisTestedNonInferiority",
"OutcomeAnalysisNonInferiorityComment","OutcomeAnalysisPValue",
"OutcomeAnalysisPValueComment","OutcomeAnalysisStatisticalMethod",
"OutcomeAnalysisStatisticalComment","OutcomeAnalysisParamType",
"OutcomeAnalysisParamValue","OutcomeAnalysisCIPctValue","OutcomeAnalysisCINumSides",
"OutcomeAnalysisCILowerLimit","OutcomeAnalysisCIUpperLimit",
"OutcomeAnalysisDispersionType","OutcomeAnalysisDispersionValue",
"OutcomeAnalysisEstimateComment","OutcomeAnalysisOtherAnalysisDescription")
basic_fields <- get_study_fields(expr,basic_info_fields, max_studies = 50, format = "csv", just_fields = TRUE)
View(basic_info_fields)
result_fields <- get_study_fields(expr,results_info_fields, max_studies = 50, format = "csv", just_fields = TRUE)
View(basic_fields)
View(result_fields)
new_df <- merge(basic_fields,result_fields)
View(new_df)
View(new_df)
View(study_fields)
study_fields()
study_fields <- function() {
# returns study fields list
fields_list <- json_handler(glue("{b_url}{b_info}study_fields_list?{fmt_json}"))
return(fields_list$StudyFields)
}
study_fields()
basic_info_fields <- function(){
basic_info_fields <-list("NCTId","OverallStatus","CompletionDate","StudyType","BriefTitle",
"BriefSummary","Keyword","EnrollmentCount","EligibilityCriteria",
"LocationCountry","Condition","DesignAllocation","DesignPrimaryPurpose",
"DesignInterventionModel","ArmGroupLabel","ArmGroupType","InterventionType",
return(basic_info_fields)                                                        "InterventionName","InterventionDescription","PrimaryOutcomeMeasure")
}
basic_info_fields <- function(){
basic_info_fields <-list("NCTId","OverallStatus","CompletionDate","StudyType",
"BriefTitle","BriefSummary","Keyword","EnrollmentCount",
"EligibilityCriteria","LocationCountry","Condition","DesignAllocation",
"DesignPrimaryPurpose","DesignInterventionModel","ArmGroupLabel",
"ArmGroupType","InterventionType","InterventionName",
"InterventionDescription","PrimaryOutcomeMeasure")
return(basic_info_fields)
}
basic_info_fields()
print(basi_)
print(basic_info_fields())
basic_fields <- get_study_fields(expr,basic_info_fields(), max_studies = 50, format = "csv", just_fields = TRUE)
View(basic_fields)
results_info_fields <- function() {
results_info_fields <- list("NCTId","OutcomeAnalysisGroupId","OutcomeAnalysisGroupDescription",
"OutcomeAnalysisNonInferiorityType","OutcomeAnalysisTestedNonInferiority",
"OutcomeAnalysisNonInferiorityComment","OutcomeAnalysisPValue",
"OutcomeAnalysisPValueComment","OutcomeAnalysisStatisticalMethod",
"OutcomeAnalysisStatisticalComment","OutcomeAnalysisParamType",
"OutcomeAnalysisParamValue","OutcomeAnalysisCIPctValue","OutcomeAnalysisCINumSides",
"OutcomeAnalysisCILowerLimit","OutcomeAnalysisCIUpperLimit",
"OutcomeAnalysisDispersionType","OutcomeAnalysisDispersionValue",
"OutcomeAnalysisEstimateComment","OutcomeAnalysisOtherAnalysisDescription")
return(results_info_fields)
}
basic_fields <- get_study_fields(expr,results_info_fields(), max_studies = 50, format = "csv", just_fields = TRUE)
View(basic_fields)
basic_info_fields <- function(){
basic_info_fields <-list("NCTId","OverallStatus","CompletionDate","StudyType",
"BriefTitle","BriefSummary","Keyword","EnrollmentCount",
"EligibilityCriteria","LocationCountry","Condition","DesignAllocation",
"DesignPrimaryPurpose","DesignInterventionModel","ArmGroupLabel",
"ArmGroupType","InterventionType","InterventionName",
"InterventionDescription","PrimaryOutcomeMeasure")
return(basic_info_fields)
}
# from results: statistical analysis data elements
results_info_fields <- function() {
results_info_fields <- list("NCTId","OutcomeAnalysisGroupId","OutcomeAnalysisGroupDescription",
"OutcomeAnalysisNonInferiorityType","OutcomeAnalysisTestedNonInferiority",
"OutcomeAnalysisNonInferiorityComment","OutcomeAnalysisPValue",
"OutcomeAnalysisPValueComment","OutcomeAnalysisStatisticalMethod",
"OutcomeAnalysisStatisticalComment","OutcomeAnalysisParamType",
"OutcomeAnalysisParamValue","OutcomeAnalysisCIPctValue","OutcomeAnalysisCINumSides",
"OutcomeAnalysisCILowerLimit","OutcomeAnalysisCIUpperLimit",
"OutcomeAnalysisDispersionType","OutcomeAnalysisDispersionValue",
"OutcomeAnalysisEstimateComment","OutcomeAnalysisOtherAnalysisDescription")
return(results_info_fields)
}
# PICO
# Population fields
population_fields <- function() {
P_fields <-list("NCTId","LocationCountry","Condition","Gender","GenderBased","GenderDescription",
"MinimumAge","MaximumAge","HealthyVolunteers","EligibilityCriteria")
return(P_fields)
}
# Intervention and Comparison/Control Fields
intr_comp_fields <- function() {
IC_fields <- list("NCTId","ArmGroupLabel","ArmGroupType","ArmGroupDescription","InterventionType",
"InterventionName","InterventionOtherName","InterventionDescription")
return(IC_fields)
}
# Outcome Fields
outcome_fields <- function(){
O_fields <- list("NCTId","OutcomeMeasureType","OutcomeMeasureTitle","OutcomeMeasureDescription",
"OutcomeMeasureTimeFrame","OutcomeMeasureAnticipatedPostingDate","OutcomeGroupTitle",
"OutcomeGroupDescription","OutcomeDenomCountValue","OutcomeMeasureTypeUnitsAnalyzed",
"OutcomeDenomUnits","OutcomeMeasurePopulationDescription","OutcomeMeasureParamType",
"OutcomeMeasureDispersionType","OutcomeCategoryTitle","OutcomeClassTitle",
"OutcomeClassDenomCountValue","OutcomeClassDenomUnits","OutcomeMeasurementValue",
"OutcomeMeasureUnitOfMeasure")
return(O_fields)
}
api_info <- function() {
# returns last update and version
last_updated <- c("Last updated: ", json_handler(glue("{b_url}{b_info}data_vrs?{fmt_json}")))
api_version <- c("API version: ", json_handler(glue("{b_url}{b_info}api_vrs?{fmt_json}")))
api_info <- c(last_updated,api_version)
return(api_info)
}
api_info()
api_info <- function() {
# returns last update and version
last_updated <- c("Last updated:", json_handler(glue("{b_url}{b_info}data_vrs?{fmt_json}")))
api_version <- c("API version:", json_handler(glue("{b_url}{b_info}api_vrs?{fmt_json}")))
api_info <- c(last_updated,api_version)
return(api_info)
}
api_info()
api_info <- function() {
# returns last update and version
hdrs <- c("Last updated","API version")
info <- c( json_handler(glue("{b_url}{b_info}data_vrs?{fmt_json}")),
json_handler(glue("{b_url}{b_info}api_vrs?{fmt_json}")))
api_info <- c(last_updated,api_version)
return(api_info)
}
api_info()
api_info <- function() {
# returns last update and version
hdrs <- c("Last updated","API version")
info <- c( json_handler(glue("{b_url}{b_info}data_vrs?{fmt_json}")),
json_handler(glue("{b_url}{b_info}api_vrs?{fmt_json}")))
api_info <- c(hdrs,info)
return(api_info)
}
api_info()
api_info <- function() {
# returns last update and version
hdrs <- c("Last updated","API version")
info <- c( json_handler(glue("{b_url}{b_info}data_vrs?{fmt_json}")),
json_handler(glue("{b_url}{b_info}api_vrs?{fmt_json}")))
api_info <- as.data.frame(hdrs,info)
return(api_info)
}
api_info()
api_info <- function() {
# returns last update and version
hdrs <- c("Last updated","API version")
info <- c( json_handler(glue("{b_url}{b_info}data_vrs?{fmt_json}")),
json_handler(glue("{b_url}{b_info}api_vrs?{fmt_json}")))
api_info <- as.data.frame(row.names = c("Last updated","API info"),)
return(api_info)
}
api_info()
library(glue)
api_info <- function() {
# returns last update and version
hdrs <- c("Last updated","API version")
info <- c( json_handler(glue("{b_url}{b_info}data_vrs?{fmt_json}")),
json_handler(glue("{b_url}{b_info}api_vrs?{fmt_json}")))
api_info <- as.data.frame(info,row.names = c("Last updated","API info"),)
return(api_info)
}
api_info()
api_info <- function() {
# returns last update and version
hdrs <- c("Last updated","API version")
info <- c( json_handler(glue("{b_url}{b_info}data_vrs?{fmt_json}")),
json_handler(glue("{b_url}{b_info}api_vrs?{fmt_json}")))
api_info <- as.data.frame(info,row.names = c("Last updated","API info"))
return(api_info)
}
api_info()
hdrs <- c("Last updated","API version")
info <- c( json_handler(glue("{b_url}{b_info}data_vrs?{fmt_json}")),
json_handler(glue("{b_url}{b_info}api_vrs?{fmt_json}")))
api_info <- as.data.frame(info,row.names = c("Last updated","API version"), `colnames<-`(""))
api_info <- function() {
# returns last update and version
api_info <- as.data.frame(c( json_handler(glue("{b_url}{b_info}data_vrs?{fmt_json}")),
json_handler(glue("{b_url}{b_info}api_vrs?{fmt_json}"))),
row.names = c("Last updated","API info"))
return(api_info)
}
api_info()
api_info <- function() {
# returns last update and version
api_info <- as.data.frame(info <- c(json_handler(glue("{b_url}{b_info}data_vrs?{fmt_json}")),
json_handler(glue("{b_url}{b_info}api_vrs?{fmt_json}"))),
row.names = c("Last updated","API info"))
return(api_info)
}
api_info()
api_info <- function() {
# returns last update and version
info <- c(json_handler(glue("{b_url}{b_info}data_vrs?{fmt_json}")),
json_handler(glue("{b_url}{b_info}api_vrs?{fmt_json}")))
api_info <- as.data.frame(info,row.names = c("Last updated","API info"))
return(api_info)
}
api_info()
api_info <- function() {
# returns last update and version
Values <- c(json_handler(glue("{b_url}{b_info}data_vrs?{fmt_json}")),
json_handler(glue("{b_url}{b_info}api_vrs?{fmt_json}")))
api_info <- as.data.frame(Values,row.names = c("Last updated","API info"))
return(api_info)
}
api_info()
library(netmeta)
data(Senn2013)
View(Senn2013)
net1 <- netmeta(TE, seTE, treat1, treat2, studlab,
data = Senn2013, sm = "MD",
comb.random = FALSE)
View(net1)
install.packages("devtools")#
install.packages("roxygen2")
install.packages("Rtools")
library(devtools)
install_github("AdlCruz/rctapi")
setwd("~/GitHub/rctapi")
document()
library(devtools)
library(install_github("AdlCruz/rctapi"))
install_github("AdlCruz/rctapi")
libray(rctapi)
library(rctapi)
data("field_lists_df")
force(field_lists_df)
View(field_lists_df)
get_vector_all_study_fields()
get_study_fields("exercise AND AREA[StudyType]Intervention AND TILT[BriefSummary]weightlifting", core_info_fields)
x <- get_study_fields("exercise AND AREA[StudyType]Intervention AND TILT[BriefSummary]weightlifting", core_info_fields)
View(x)
x <- get_study_fields("exercise AND AREA[StudyType]Intervention AND TILT[BriefSummary]weightlifting AND AREA[EnrollmentCount]RANGE[200,MAX]", core_info_fields)
