wellPanel(
checkboxGroupInput(
"show_vars","Columns to show:",names(df),selected_cols))
),
column(10,
tabsetPanel(id = 'dataset',
tabPanel("Data Table", DT::dataTableOutput("df"),
verbatimTextOutput("rowcolInd")),
tabPanel("Plots",plotOutput("meshterm_phase_barplot"),plotOutput("gender_pie"),
plotOutput("age_pie"),plotOutput("studytype_pie"),plotOutput("condition_pie")))
),
),
fluidRow(p(class = 'text-center', downloadButton('dldButton', 'Download Filtered Data')))
)
# Define server logic
server <- function(input, output) {
# choose columns to display
# row+column selection function
print_rows_cols = function(id) {
cat('Rows selected:\n')
print(input[[paste0(id, '_rows_selected')]])
cat('You can use the column names at the bottom of the table\nColumns selected:\n')
print(input[[paste0(id, '_columns_selected')]])
}
# data table output
output$df<- DT::renderDataTable({
DT::datatable(df[, input$show_vars, drop = FALSE],selection = list(target = 'row+column'),
options = list(lengthMenu = c(10, 50,100, 200), pageLength = 100, server = TRUE )
)
})
#plot outplot
# output$plot <- renderPlot({})
# row + column selection output
output$rowcolInd <- renderPrint(print_rows_cols("df"))
# download the filtered data
output$dldButton = downloadHandler('studies_filtered.csv', content = function(file) {
s = input$df_rows_all
write.csv(df[s, , drop = FALSE], file)
})
}
# Create Shiny app
shinyApp(ui = ui, server = server)
runApp('LSHTM/NMA Rctapi/explorer')
runApp('LSHTM/NMA Rctapi/explorer')
?tabsetPanel
?tabPanelBody
runApp('LSHTM/NMA Rctapi/explorer')
runApp('LSHTM/NMA Rctapi/explorer')
#make datatable
df <- datatable(df)
View(df)
#make datatable
df <- datatable(df) %>% formatStyle(names(df),lineHeight='80%')
df <- zf[,-1]
#Age Criteria columns
agecols <- c("MinimumAge","MaximumAge")
df$AgeRange <- do.call(paste, c(df[ , agecols], list(sep = '-')))
# Variables by type
charcols <- c("StudyType","OverallStatus","WhyStopped","IsFDARegulatedDrug","IsFDARegulatedDevice",
"IsUnapprovedDevice","OversightHasDMC","Condition","Keyword",
"DesignPrimaryPurpose","Phase","DesignInterventionModel","DesignMasking",
"DesignAllocation","ArmGroupLabel","ArmGroupType",
"InterventionType","InterventionName","InterventionMeshId","InterventionMeshTerm",
"PrimaryOutcomeMeasure","Gender","MinimumAge","MaximumAge","HealthyVolunteers")
datecols <- c("StartDate","CompletionDate")
numcols <- c("EnrollmentCount")
# Character columns into factors
df[charcols] <- lapply(df[charcols], factor)
# no empty columns
df <- df[, colSums( is.na(df) ) < nrow(zf)]
df <- datatable(df,
options = list(searching = FALSE,
pageLength = nrow(df),
dom = 't'),
rownames = FALSE,
selection = 'none')
df <- datatable(df,
options = list(searching = FALSE,
pageLength = nrow(df),
dom = 't'),
rownames = FALSE,
selection = 'none') %>% DT::formatStyle(names(df),lineHeight='80%')
nteers")
zf <- get_study_fields(search_expr = c("psoriatic arthritis"),fields = viz_fields)
zf <- get_study_fields(search_expr = c("psoriatic arthritis"),fields = viz_fields)
df <- zf[,-1]
#Age Criteria columns
agecols <- c("MinimumAge","MaximumAge")
df$AgeRange <- do.call(paste, c(df[ , agecols], list(sep = '-')))
# Variables by type
charcols <- c("StudyType","OverallStatus","WhyStopped","IsFDARegulatedDrug","IsFDARegulatedDevice",
"IsUnapprovedDevice","OversightHasDMC","Condition","Keyword",
"DesignPrimaryPurpose","Phase","DesignInterventionModel","DesignMasking",
"DesignAllocation","ArmGroupLabel","ArmGroupType",
"InterventionType","InterventionName","InterventionMeshId","InterventionMeshTerm",
"PrimaryOutcomeMeasure","Gender","MinimumAge","MaximumAge","HealthyVolunteers")
datecols <- c("StartDate","CompletionDate")
numcols <- c("EnrollmentCount")
# Character columns into factors
df[charcols] <- lapply(df[charcols], factor)
# no empty columns
df <- df[, colSums( is.na(df) ) < nrow(df)]
# no empty columns
xf <- df[, colSums( is.na(df) ) < nrow(df)]%>% DT::formatStyle(names(df),lineHeight='80%')
?formatStyle
output$df<- DT::renderDataTable({
DT::datatable(df[, input$show_vars, drop = FALSE],selection = list(target = 'row+column'),
options = list(lengthMenu = c(10, 50,100, 200), pageLength = 10, server = TRUE ),
class = "compact")
})
runApp('LSHTM/NMA Rctapi/explorer')
runApp('LSHTM/NMA Rctapi/explorer')
char_cols <- c("WhyStopped",
"OversightHasDMC","Keyword",
"ArmGroupLabel","ArmGroupType",
"InterventionType","InterventionName",
"PrimaryOutcomeMeasure")
fct_cols <- c("StudyType","OverallStatus","IsFDARegulatedDrug","IsFDARegulatedDevice",
"IsUnapprovedDevice","Condition","DesignPrimaryPurpose","Phase",
"DesignInterventionModel","DesignMasking","DesignAllocation",
"InterventionMeshId","InterventionMeshTerm","Gender","MinimumAge",
"MaximumAge","HealthyVolunteers")
df <- zf[,-1]
#Age Criteria columns
age_cols <- c("MinimumAge","MaximumAge")
df$AgeRange <- do.call(paste, c(df[ , age_cols], list(sep = '-')))
# Variables by type
fct_cols <- c("StudyType","OverallStatus","IsFDARegulatedDrug","IsFDARegulatedDevice",
"IsUnapprovedDevice","Condition","DesignPrimaryPurpose","Phase",
"DesignInterventionModel","DesignMasking","DesignAllocation",
"InterventionMeshId","InterventionMeshTerm","Gender","MinimumAge",
"MaximumAge","HealthyVolunteers")
char_cols <- c("WhyStopped",
"OversightHasDMC","Keyword",
"ArmGroupLabel","ArmGroupType",
"InterventionType","InterventionName",
"PrimaryOutcomeMeasure")
date_cols <- c("StartDate","CompletionDate")
num_cols <- c("EnrollmentCount")
num_cols <- c("EnrollmentCount")
# Character columns into factors
df[fct_cols] <- lapply(df[fct_cols], factor)
# no empty columns
df <- df[, colsums( is.na(df) ) < nrow(df)]
# no empty columns
df <- df[, colSums( is.na(df) ) < nrow(df)]
#make datatable
selected_cols <- c("NCTId","StudyType","OverallStatus","StartDate",
"CompletionDate","IsFDARegulatedDrug","IsFDARegulatedDevice","IsUnapprovedDevice",
"OversightHasDMC","Condition","DesignPrimaryPurpose","Phase",
"DesignInterventionModel","DesignMasking","DesignAllocation","EnrollmentCount",
"ArmGroupType","InterventionType",
"InterventionMeshTerm","Gender","MinimumAge","MaximumAge","HealthyVolunteers")
# df$StartDate <- parse_date_time(x = zf$StartDate,
runApp('LSHTM/NMA Rctapi/explorer')
?autoWidth
?datatable
runApp('LSHTM/NMA Rctapi/explorer')
runApp('LSHTM/NMA Rctapi/explorer')
runApp('LSHTM/NMA Rctapi/explorer')
runApp('LSHTM/NMA Rctapi/explorer')
runApp('LSHTM/NMA Rctapi/explorer')
runApp('LSHTM/NMA Rctapi/explorer')
runApp('LSHTM/NMA Rctapi/explorer')
runApp('LSHTM/NMA Rctapi/explorer')
runApp('LSHTM/NMA Rctapi/explorer')
runApp('LSHTM/NMA Rctapi/explorer')
shiny::runApp('GitHub/journal')
require(shiny)
require(shinyWidgets)
require(shinydashboard)
runApp('GitHub/journal')
?textAreaInput
runApp('GitHub/journal')
runApp('GitHub/journal')
runApp('GitHub/journal')
runApp('GitHub/journal')
runApp('GitHub/journal')
runApp('GitHub/journal')
runApp('GitHub/journal')
runApp('GitHub/journal')
runApp('GitHub/journal')
document()
library(devtools)
libary(rctapi)
library(rctapi)
library(rctexplorer)
launch_explorer(set_app_input("heart",max_studies = 100))
shiny::runApp('GitHub/rctexplorer/inst')
require(shiny)
require(shinydashboard)
require(DT)
require(dplyr)
require(ggplot2)
require(treemap)
require(RColorBrewer)
require(rctapi)
require(naniar)
require(plotly)
library(rctexplorer)
runApp('GitHub/rctexplorer/inst')
df <- set_app_input("psoriatic arthritis", max_studies = 100)
runApp('GitHub/rctexplorer/inst')
launch_explorer(df)
library(devtools)
install_github("AdlCruz/rctapi")
library(rctexplorer)
launch_explorer(df)
install_github("AdlCruz/rctapi")
install_github("AdlCruz/rctexplorer")
library(rctexplorer)
?launch_explorer
library(devtools)
install_github("AdlCruz/rctapi")
install_github("AdlCruz/rctexplorer")
library(rctapi)
library(rctexplorer)
launch_explorer(df)
update_packages("ellipsis")
shiny::runApp('GitHub/rctexplorer/inst/app')
library(rctapi)
library(rctexplorer)
df <- set_app_input("psoriatic arthritis", fields = for_explorer, max_studies = 500)
launch_explorer(df)
runApp('GitHub/rctexplorer/inst/app')
library(devtools)
library(rctapi)
library(rctexplorer)
#df <- get_study_fields("psoriatic arthritis", fields = for_explorer, max_studies = 100)
#
df <- set_app_input("psoriatic arthritis", fields = for_netmeta, max_studies = 500)
launch_explorer(df)
library(rctapi)
library(tidyr)
library(dplyr)
library(splitstackshape)
library(netmeta)
library(stringr)
library(edgebundleR)
library(igraph)
library(glue)
library(circlize)
df <- get_study_fields("psoriatic arthritis AND AREA[StudyType]Interventional", for_netmeta)
armify <- function(df) {
df <- df[,-which(names(df)=="Rank")]
make_wide <- cSplit(df,names(df[,-which(names(df)=="NCTId")]),sep = "|", drop = T)
make_character<- mutate(make_wide, across(everything(),as.character))
make_long <- pivot_longer(make_character,!c("NCTId"), names_to = c(".value","fields"), names_sep = "_", values_drop_na = T)
}
arms <- armify(df)
edges <- arms %>%
select(NCTId, fields,ArmGroupInterventionName) %>%
filter(!is.na(ArmGroupInterventionName)) %>%
filter(fields == "001" | fields == "002")
View(edges)
pairs <- pivot_wider(edges, id_cols = NCTId, names_from = fields, values_from = ArmGroupInterventionName)
pairs <- pairs[complete.cases(pairs),]
find <- c("Placebo","Adalimumab","Apremilast", "Methotrexate", "etanercept", "secukinumab")
find_exp <- paste0(find, collapse = "|")
res <- pairs %>%filter_all(any_vars(grepl(pattern = find_exp,., ignore.case = T)))
names(res)[names(res) == '001'] <- 'lab1'
names(res)[names(res) == '002'] <- 'lab2'
res$lab1 <- ifelse(grepl("placebo",res$lab1,ignore.case = T),"Any Placebo", res$lab1)
res$lab2 <- ifelse(grepl("placebo",res$lab2,ignore.case = T),"Any Placebo", res$lab2)
nodes <- c(res[,2],res[,3]) %>% unlist() %>% unique()
g <- graph.data.frame(res[,2:3], vertices = nodes, directed = F)
edgebundle(g, nodesize = c(0.1,30), padding = 150, fontsize = 10)
freq_pairs <- res %>% group_by(lab1,lab2) %>% summarize(freq = n())
circos.initialize()
chordDiagram(freq_pairs, annotationTrack = "grid", preAllocateTracks = list(track.height = 0.1))
circos.trackPlotRegion(track.index = 1, panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
xplot = get.cell.meta.data("xplot")
ylim = get.cell.meta.data("ylim")
sector.name = get.cell.meta.data("sector.index")
if(abs(xplot[2] - xplot[1]) < 10) {
circos.text(mean(xlim), ylim[1], sector.name, facing = "clockwise",
niceFacing = TRUE, adj = c(0, 0.5))
} else {
circos.text(mean(xlim), ylim[1], sector.name, facing = "inside",
niceFacing = TRUE, adj = c(0.5, 0))
}
}, bg.border = NA)
df <- set_app_input("psoriatic arthritis AND AREA[StudyType]Interventional", fields = for_explorer, max_studies = 500)
View(df)
View(arms)
View(edges)
View(pairs)
df <- set_app_input("psoriatic arthritis AND AREA[StudyType]Interventional", fields = for_explorer, max_studies = 500)
launch_explorer(df)
View(df)
df <- get_study_fields("psoriatic arthritis AND AREA[StudyType]Interventional", for_netmeta)
df <- get_study_fields("psoriatic arthritis AND AREA[StudyType]Interventional", for_netmeta)
View(df)
edges <- arms %>%
select(NCTId, fields,ArmGroupInterventionName) %>%
filter(!is.na(ArmGroupInterventionName)) %>%
filter(fields == "001" | fields == "002")
View(edges)
View(arms)
View(pairs)
View(res)
edgebundle(g, nodesize = c(0.1,30), padding = 150, fontsize = 10)
chordDiagram(freq_pairs, annotationTrack = "grid", preAllocateTracks = list(track.height = 0.1))
circos.trackPlotRegion(track.index = 1, panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
xplot = get.cell.meta.data("xplot")
ylim = get.cell.meta.data("ylim")
sector.name = get.cell.meta.data("sector.index")
if(abs(xplot[2] - xplot[1]) < 10) {
circos.text(mean(xlim), ylim[1], sector.name, facing = "clockwise",
niceFacing = TRUE, adj = c(0, 0.5))
} else {
circos.text(mean(xlim), ylim[1], sector.name, facing = "inside",
niceFacing = TRUE, adj = c(0.5, 0))
}
}, bg.border = NA)
?system.file
?get_study_fields
# netmetafy
#
#
#
df <- get_study_fields("psoriatic arthritis AND AREA[StudyType]Interventional", for_netmeta)
library(rctapi);library(rctexplorer)
# netmetafy
#
#
#
df <- get_study_fields("psoriatic arthritis AND AREA[StudyType]Interventional", for_netmeta)
long_pairs <- long_arms %>%
select(names(long_arms))
df <- get_study_fields("psoriatic arthritis AND AREA[StudyType]Interventional", for_netmeta)
armify <- function(df) {
df <- df[,-which(names(df)=="Rank")]
make_wide <- cSplit(df,names(df[,-which(names(df)=="NCTId")]),sep = "|", drop = T)
make_character<- mutate(make_wide, across(everything(),as.character))
make_long <- pivot_longer(make_character,!c("NCTId"), names_to = c(".value","fields"), names_sep = "_", values_drop_na = T)
}
long_arms <- armify(df)
library(rctapi)
library(tidyr)
library(dplyr)
library(splitstackshape)
library(netmeta)
library(stringr)
library(edgebundleR)
library(igraph)
library(glue)
library(circlize)
library(netmeta)
df <- get_study_fields("psoriatic arthritis AND AREA[StudyType]Interventional", for_netmeta)
armify <- function(df) {
df <- df[,-which(names(df)=="Rank")]
make_wide <- cSplit(df,names(df[,-which(names(df)=="NCTId")]),sep = "|", drop = T)
make_character<- mutate(make_wide, across(everything(),as.character))
make_long <- pivot_longer(make_character,!c("NCTId"), names_to = c(".value","fields"), names_sep = "_", values_drop_na = T)
}
long_arms <- armify(df)
long_pairs <- long_arms %>%
select(names(long_arms))
View(long_pairs)
View(df)
for_netmeta
library(rctapi)
library(tidyr)
library(dplyr)
library(splitstackshape)
library(netmeta)
library(stringr)
library(edgebundleR)
library(igraph)
library(glue)
library(circlize)
library(netmeta)
df <- get_study_fields("psoriatic arthritis AND AREA[StudyType]Interventional", for_netmeta[1:12])
# Make df into arm per row + as many rows per study to fit all separated information
armify <- function(df) {
df <- df[,-which(names(df)=="Rank")]
make_wide <- cSplit(df,names(df[,-which(names(df)=="NCTId")]),sep = "|", drop = T)
make_character<- mutate(make_wide, across(everything(),as.character))
make_long <- pivot_longer(make_character,!c("NCTId"), names_to = c(".value","fields"), names_sep = "_", values_drop_na = T)
}
arms <- armify(df)
# separate into incomplete arm pairs
edges <- arms %>%
select(NCTId, fields,ArmGroupInterventionName) %>%
drop_na(ArmGroupInterventionName) %>% #filter(!is.na(ArmGroupInterventionName)) %>%
filter(fields == "01" | fields == "02")
pairs <- pivot_wider(edges, id_cols = NCTId, names_from = fields, values_from = ArmGroupInterventionName)
pairs <- pairs[complete.cases(pairs),]
# from pairs we define drugs/nodes of interest
# easier than regexp <- glue("\b(?:{find_exp})\b")
#
find <- c("Placebo","Adalimumab","Apremilast", "Methotrexate", "etanercept", "secukinumab")
find_exp <- paste0(find, collapse = "|")
res <- pairs %>%filter_all(any_vars(grepl(pattern = find_exp,., ignore.case = T)))
names(res)[names(res) == '01'] <- 'lab1'
names(res)[names(res) == '02'] <- 'lab2'
for (i in find) {
res$lab1 <- ifelse(grepl(i,res$lab1,ignore.case = T),i, res$lab1)
}
for (i in find) {
res$lab2 <- ifelse(grepl(i,res$lab2,ignore.case = T),i, res$lab2)
}
View(res)
View(res)
nodes <- c(res[,2],res[,3]) %>% unlist() %>% unique()
# with igraph
g <- graph.data.frame(res[,2:3], vertices = nodes, directed = F)
#with edgebundle, takes igraph object
edgebundle(g, nodesize = c(0.1,30), padding = 150, fontsize = 10)
shinyedge(g)
# with circlize
freq_pairs <- res %>% group_by(lab1,lab2) %>% summarize(freq = n())
circos.initialize()
chordDiagram(freq_pairs, annotationTrack = "grid", preAllocateTracks = list(track.height = 0.1))
circos.trackPlotRegion(track.index = 1, panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
xplot = get.cell.meta.data("xplot")
ylim = get.cell.meta.data("ylim")
sector.name = get.cell.meta.data("sector.index")
if(abs(xplot[2] - xplot[1]) < 10) {
circos.text(mean(xlim), ylim[1], sector.name, facing = "clockwise",
niceFacing = TRUE, adj = c(0, 0.5))
} else {
circos.text(mean(xlim), ylim[1], sector.name, facing = "inside",
niceFacing = TRUE, adj = c(0.5, 0))
}
}, bg.border = NA)
circos.clear()
library(shiny); source('GitHub/journal/run.R')
source('run.R')
source('GitHub/journal/run.R')
source('GitHub/journal/run.R')
runApp()
runApp('GitHub/journal')
runApp('GitHub/journal')
runApp('GitHub/journal')
runApp('GitHub/journal')
runApp('GitHub/journal')
runApp('GitHub/journal')
runApp('GitHub/journal')
runApp('GitHub/journal')
runApp('GitHub/journal')
runApp('GitHub/journal')
runApp('GitHub/journal')
setwd("~/GitHub/rctexplorer")
library(devtools)
library(rctapi)
setwd("~/GitHub/rctapi")
devtools:check()
devtools::check()
document()
devtools::check()
get_vector_all_study_fields <- function() {
# returns study fields character vector
dec_content <- jsonlite::fromJSON(httr::content(request_ct(glue("{b_url}{b_info}study_fields_list?{fmt_json}")), "text"), simplifyVector = TRUE)
#fields_list <- json_handler(glue("{b_url}{b_info}study_fields_list?{fmt_json}"))
#
fields_character <- (fields_list$Fields)
return(dec_content)
}
x <- get_vector_all_study_fields()
library(rctapi)
x <- get_vector_all_study_fields()
get_vector_all_study_fields <- function() {
# returns study fields character vector
dec_content <- jsonlite::fromJSON(httr::content(request_ct(glue("{b_url}{b_info}study_fields_list?{fmt_json}")), "text"), simplifyVector = TRUE)
#fields_list <- json_handler(glue("{b_url}{b_info}study_fields_list?{fmt_json}"))
#
fields_character <- (fields_list$Fields)
return(dec_content)
}
x<- get_vector_all_study_fields()
get_vector_all_study_fields <- function() {
# returns study fields character vector
dec_content <- jsonlite::fromJSON(httr::content(request_ct(glue::glue("{b_url}{b_info}study_fields_list?{fmt_json}")), "text"), simplifyVector = TRUE)
#fields_list <- json_handler(glue("{b_url}{b_info}study_fields_list?{fmt_json}"))
#
fields_character <- (fields_list$Fields)
return(dec_content)
}
x <- get_vector_all_study_fields()
get_vector_all_study_fields <- function() {
# returns study fields character vector
dec_content <- jsonlite::fromJSON(httr::content(request_ct(glue::glue("{b_url}{b_info}study_fields_list?{fmt_json}")), "text"), simplifyVector = TRUE)
decoded_response <- dec_content[[1]]
fields_character <- (decoded_response$Fields)
return(fields_character)
}
x <- get_vector_all_study_fields()
document()
document()
document()
document(0)
document()
check()
library(rctexplorer)
library(rctapi)
library(rctexplorer)
install_github("AdlCruz/rctapi")
library(rctexplorer)
library(devtools)
install_github("AdlCruz/rctapi")
library(rctapi)
install_github("AdlCruz/rctexplorer")
library(rctexplorer)
df <- get_study_fields("myasthenia gravis", basic_info_fields, response_content = TRUE)
df <- get_study_fields("myasthenia gravis", core_info_fields, response_content = TRUE)
View(df)
af <- set_app_input("myasthenia gravis")
