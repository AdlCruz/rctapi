filter(fields == "001" | fields == "002")
View(edges)
pairs <- pivot_wider(edges, id_cols = NCTId, names_from = fields, values_from = ArmGroupInterventionName)
pairs <- pairs[complete.cases(pairs),]
find <- c("Placebo","Adalimumab","Apremilast", "Methotrexate", "etanercept", "secukinumab")
find_exp <- paste0(find, collapse = "|")
res <- pairs %>%filter_all(any_vars(grepl(pattern = find_exp,., ignore.case = T)))
names(res)[names(res) == '001'] <- 'lab1'
names(res)[names(res) == '002'] <- 'lab2'
res$lab1 <- ifelse(grepl("placebo",res$lab1,ignore.case = T),"Any Placebo", res$lab1)
res$lab2 <- ifelse(grepl("placebo",res$lab2,ignore.case = T),"Any Placebo", res$lab2)
nodes <- c(res[,2],res[,3]) %>% unlist() %>% unique()
g <- graph.data.frame(res[,2:3], vertices = nodes, directed = F)
edgebundle(g, nodesize = c(0.1,30), padding = 150, fontsize = 10)
freq_pairs <- res %>% group_by(lab1,lab2) %>% summarize(freq = n())
circos.initialize()
chordDiagram(freq_pairs, annotationTrack = "grid", preAllocateTracks = list(track.height = 0.1))
circos.trackPlotRegion(track.index = 1, panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
xplot = get.cell.meta.data("xplot")
ylim = get.cell.meta.data("ylim")
sector.name = get.cell.meta.data("sector.index")
if(abs(xplot[2] - xplot[1]) < 10) {
circos.text(mean(xlim), ylim[1], sector.name, facing = "clockwise",
niceFacing = TRUE, adj = c(0, 0.5))
} else {
circos.text(mean(xlim), ylim[1], sector.name, facing = "inside",
niceFacing = TRUE, adj = c(0.5, 0))
}
}, bg.border = NA)
df <- set_app_input("psoriatic arthritis AND AREA[StudyType]Interventional", fields = for_explorer, max_studies = 500)
View(df)
View(arms)
View(edges)
View(pairs)
df <- set_app_input("psoriatic arthritis AND AREA[StudyType]Interventional", fields = for_explorer, max_studies = 500)
launch_explorer(df)
View(df)
df <- get_study_fields("psoriatic arthritis AND AREA[StudyType]Interventional", for_netmeta)
df <- get_study_fields("psoriatic arthritis AND AREA[StudyType]Interventional", for_netmeta)
View(df)
edges <- arms %>%
select(NCTId, fields,ArmGroupInterventionName) %>%
filter(!is.na(ArmGroupInterventionName)) %>%
filter(fields == "001" | fields == "002")
View(edges)
View(arms)
View(pairs)
View(res)
edgebundle(g, nodesize = c(0.1,30), padding = 150, fontsize = 10)
chordDiagram(freq_pairs, annotationTrack = "grid", preAllocateTracks = list(track.height = 0.1))
circos.trackPlotRegion(track.index = 1, panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
xplot = get.cell.meta.data("xplot")
ylim = get.cell.meta.data("ylim")
sector.name = get.cell.meta.data("sector.index")
if(abs(xplot[2] - xplot[1]) < 10) {
circos.text(mean(xlim), ylim[1], sector.name, facing = "clockwise",
niceFacing = TRUE, adj = c(0, 0.5))
} else {
circos.text(mean(xlim), ylim[1], sector.name, facing = "inside",
niceFacing = TRUE, adj = c(0.5, 0))
}
}, bg.border = NA)
?system.file
?get_study_fields
# netmetafy
#
#
#
df <- get_study_fields("psoriatic arthritis AND AREA[StudyType]Interventional", for_netmeta)
library(rctapi);library(rctexplorer)
# netmetafy
#
#
#
df <- get_study_fields("psoriatic arthritis AND AREA[StudyType]Interventional", for_netmeta)
long_pairs <- long_arms %>%
select(names(long_arms))
df <- get_study_fields("psoriatic arthritis AND AREA[StudyType]Interventional", for_netmeta)
armify <- function(df) {
df <- df[,-which(names(df)=="Rank")]
make_wide <- cSplit(df,names(df[,-which(names(df)=="NCTId")]),sep = "|", drop = T)
make_character<- mutate(make_wide, across(everything(),as.character))
make_long <- pivot_longer(make_character,!c("NCTId"), names_to = c(".value","fields"), names_sep = "_", values_drop_na = T)
}
long_arms <- armify(df)
library(rctapi)
library(tidyr)
library(dplyr)
library(splitstackshape)
library(netmeta)
library(stringr)
library(edgebundleR)
library(igraph)
library(glue)
library(circlize)
library(netmeta)
df <- get_study_fields("psoriatic arthritis AND AREA[StudyType]Interventional", for_netmeta)
armify <- function(df) {
df <- df[,-which(names(df)=="Rank")]
make_wide <- cSplit(df,names(df[,-which(names(df)=="NCTId")]),sep = "|", drop = T)
make_character<- mutate(make_wide, across(everything(),as.character))
make_long <- pivot_longer(make_character,!c("NCTId"), names_to = c(".value","fields"), names_sep = "_", values_drop_na = T)
}
long_arms <- armify(df)
long_pairs <- long_arms %>%
select(names(long_arms))
View(long_pairs)
View(df)
for_netmeta
library(rctapi)
library(tidyr)
library(dplyr)
library(splitstackshape)
library(netmeta)
library(stringr)
library(edgebundleR)
library(igraph)
library(glue)
library(circlize)
library(netmeta)
df <- get_study_fields("psoriatic arthritis AND AREA[StudyType]Interventional", for_netmeta[1:12])
# Make df into arm per row + as many rows per study to fit all separated information
armify <- function(df) {
df <- df[,-which(names(df)=="Rank")]
make_wide <- cSplit(df,names(df[,-which(names(df)=="NCTId")]),sep = "|", drop = T)
make_character<- mutate(make_wide, across(everything(),as.character))
make_long <- pivot_longer(make_character,!c("NCTId"), names_to = c(".value","fields"), names_sep = "_", values_drop_na = T)
}
arms <- armify(df)
# separate into incomplete arm pairs
edges <- arms %>%
select(NCTId, fields,ArmGroupInterventionName) %>%
drop_na(ArmGroupInterventionName) %>% #filter(!is.na(ArmGroupInterventionName)) %>%
filter(fields == "01" | fields == "02")
pairs <- pivot_wider(edges, id_cols = NCTId, names_from = fields, values_from = ArmGroupInterventionName)
pairs <- pairs[complete.cases(pairs),]
# from pairs we define drugs/nodes of interest
# easier than regexp <- glue("\b(?:{find_exp})\b")
#
find <- c("Placebo","Adalimumab","Apremilast", "Methotrexate", "etanercept", "secukinumab")
find_exp <- paste0(find, collapse = "|")
res <- pairs %>%filter_all(any_vars(grepl(pattern = find_exp,., ignore.case = T)))
names(res)[names(res) == '01'] <- 'lab1'
names(res)[names(res) == '02'] <- 'lab2'
for (i in find) {
res$lab1 <- ifelse(grepl(i,res$lab1,ignore.case = T),i, res$lab1)
}
for (i in find) {
res$lab2 <- ifelse(grepl(i,res$lab2,ignore.case = T),i, res$lab2)
}
View(res)
View(res)
nodes <- c(res[,2],res[,3]) %>% unlist() %>% unique()
# with igraph
g <- graph.data.frame(res[,2:3], vertices = nodes, directed = F)
#with edgebundle, takes igraph object
edgebundle(g, nodesize = c(0.1,30), padding = 150, fontsize = 10)
shinyedge(g)
# with circlize
freq_pairs <- res %>% group_by(lab1,lab2) %>% summarize(freq = n())
circos.initialize()
chordDiagram(freq_pairs, annotationTrack = "grid", preAllocateTracks = list(track.height = 0.1))
circos.trackPlotRegion(track.index = 1, panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
xplot = get.cell.meta.data("xplot")
ylim = get.cell.meta.data("ylim")
sector.name = get.cell.meta.data("sector.index")
if(abs(xplot[2] - xplot[1]) < 10) {
circos.text(mean(xlim), ylim[1], sector.name, facing = "clockwise",
niceFacing = TRUE, adj = c(0, 0.5))
} else {
circos.text(mean(xlim), ylim[1], sector.name, facing = "inside",
niceFacing = TRUE, adj = c(0.5, 0))
}
}, bg.border = NA)
circos.clear()
library(shiny); source('GitHub/journal/run.R')
source('run.R')
source('GitHub/journal/run.R')
source('GitHub/journal/run.R')
runApp()
runApp('GitHub/journal')
runApp('GitHub/journal')
runApp('GitHub/journal')
runApp('GitHub/journal')
runApp('GitHub/journal')
runApp('GitHub/journal')
runApp('GitHub/journal')
runApp('GitHub/journal')
runApp('GitHub/journal')
runApp('GitHub/journal')
runApp('GitHub/journal')
# Module
library(rctapi)
library(rctexplorer)
?tagList
?tabPanel
df <- set_app_input("psoriatic arthritis", max_studies = 100)
# Module
table_tab_ui <- function(id) {
ns <- NS(id)
tagList(
tabPanel("Data Table",
fluidRow(
column(2,
wellPanel(actionButton(ns("select_all"), label="All/None"),
actionButton(ns("reset"), label="Reset"),
checkboxGroupInput(ns("show_vars"),"Columns to show:",names(df),selected_cols)
)
),
column(10, DT::dataTableOutput(ns("df_table")))
)
)
)
}
table_tab_server <- function(id) {
moduleServer(
id,
function(input,output,session) {
# select deselect reset columns to show
observe({
if (input$select_all > 0) {
if (input$select_all %% 2 == 0){
updateCheckboxGroupInput(session=session, inputId="show_vars",
choices = c(names(df)),
selected = c(names(df)))
}
else {
updateCheckboxGroupInput(session=session, inputId="show_vars",
choices = c(names(df)),
selected = "")
}}
})
observe({
if (input$reset > 0) {
updateCheckboxGroupInput(session=session, inputId="show_vars",
choices = c(names(df)),
selected = selected_cols)
}
})
# data table output
output$df_table <- DT::renderDT({
DT::datatable(
df[, input$show_vars, drop = FALSE],
selection = list(target = 'row+column'),
filter = 'top',
extensions = "Buttons",
options = list(
lengthMenu = c(10, 50, 100, 200, length(df$NCTId)),
pageLength = 50,
initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff'});",
"}"),
dom = 'Blfrtip',
buttons = c('copy', 'csv', 'excel', 'pdf'),
search = list(regex = TRUE),
searchHighlight = TRUE,
server = TRUE)
)
})
}
)
}
app_ui <- function() {
fluidPage(
titlePanel("Explore, Select, Download and Plot your search of clinicaltrials.gov",
windowTitle = "Data Explorer"),
tabsetPanel(id = "panels",
# Call the UI  function, this is the only place
# your ids will need to be unique
table_tab_ui(id = "table_tab" )
)
)
}
app_server <- function(input, output, session) {
# We are now calling the module server functions
# on a given id that matches the one from the UI
table_tab_server(id = "table_tab")
}
shinyApp(app_ui, app_server)
selected_cols <- c("NCTId","StudyType","OverallStatus","StartDate",
"CompletionDate","Condition","Phase","EnrollmentCount","ArmGroupType","InterventionType",
"InterventionMeshTerm","Gender","AgeRange","HealthyVolunteers")
runApp('LSHTM/modules/all modules one tab.R')
runApp('LSHTM/modules/all modules one tab.R')
runApp('LSHTM/modules/all modules one tab.R')
runApp('LSHTM/modules/all modules one tab.R')
runApp('all modules one tab.R')
runApp('LSHTM/modules/all modules one tab.R')
runApp('all modules one tab.R')
runApp('LSHTM/modules/all modules one tab.R')
runApp('all modules one tab.R')
runApp('LSHTM/modules/all modules one tab.R')
runApp('all modules one tab.R')
runApp('LSHTM/modules/all modules one tab.R')
runApp('all modules one tab.R')
runApp('LSHTM/modules/all modules one tab.R')
# Module
col_select_ui <- function(id, df, selected_cols) {
ns <- NS(id)
tagList(
wellPanel(actionButton("select_all", label="All/None"),
actionButton("reset", label="Reset"),
checkboxGroupInput("show_vars","Columns to show:",
names(df),selected_cols))
)
}
col_select_server <- function(id, df, selected_cols) {
moduleServer(
id,
function(input,output,session) {
# select deselect reset columns to show
observe({
if (input$select_all > 0) {
if (input$select_all %% 2 == 0){
updateCheckboxGroupInput(session=session, inputId="show_vars",
choices = c(names(df)),
selected = c(names(df)))
}
else {
updateCheckboxGroupInput(session=session, inputId="show_vars",
choices = c(names(df)),
selected = "")
}}
})
observe({
if (input$reset > 0) {
updateCheckboxGroupInput(session=session, inputId="show_vars",
choices = c(names(df)),
selected = selected_cols)
}
})
}
)
}
app_ui <- function() {
fluidPage(
titlePanel("Explore, Select, Download and Plot your search of clinicaltrials.gov",
windowTitle = "Data Explorer"),
tabsetPanel(id = "panels",
tabPanel("Data Table",
fluidRow(
column(2,
col_select_ui(id = "table_tab", df = df, selected_cols = selected_cols)))
)
)
)
}
app_server <- function(input, output, session) {
# We are now calling the module server functions
# on a given id that matches the one from the UI
col_select_server(id = "table_tab", df = df, selected_cols = selected_cols)
}
shinyApp(app_ui, app_server)
?actionButton
runApp('LSHTM/modules/all modules one tab.R')
runApp('all modules one tab.R')
runApp('LSHTM/modules/all modules one tab.R')
runApp('all modules one tab.R')
runApp('LSHTM/modules/all modules one tab.R')
runApp('all modules one tab.R')
runApp('LSHTM/modules/all modules one tab.R')
runApp('LSHTM/modules/all modules one tab.R')
runApp('LSHTM/modules/all modules one tab.R')
runApp('all modules one tab.R')
runApp('LSHTM/modules/all modules one tab.R')
runApp('all modules one tab.R')
runApp('LSHTM/modules/all modules one tab.R')
runApp('LSHTM/modules/all modules one tab.R')
runApp('LSHTM/modules/all modules one tab.R')
runApp('LSHTM/modules/all modules one tab.R')
runApp('LSHTM/modules/all modules one tab.R')
runApp('LSHTM/modules/all modules one tab.R')
runApp('LSHTM/modules/all modules one tab.R')
runApp('LSHTM/modules/all modules one tab.R')
runApp('LSHTM/modules/all modules one tab.R')
app_ui <- function() {
fluidPage(
titlePanel("Explore, Select, Download and Plot your search of clinicaltrials.gov",
windowTitle = "Data Explorer"),
tabsetPanel(id = "panels",
tabPanel("Data Table",
fluidRow(
column(2,
# Module 1
col_select_ui(id = "col_select", df = df, selected_cols = selected_cols)))
)
)
)
}
shinyApp(app_ui, app_server)
shinyApp(app_ui, app_server)
col_select_ui <- function(id, df, selected_cols) {
ns <- NS(id)
wellPanel(
actionButton(ns("select_all"), label="All/None"),
actionButton(ns("reset"), label="Reset"),
checkboxGroupInput(ns("show_vars"),"Columns to show:",
choices = names(df),selected =  selected_cols)
)
}
col_select_server <- function(id, df, selected_cols) {
moduleServer(
id,
function(input,output,session) {
# select deselect reset columns to show
observe({
if (input$select_all > 0) {
if (input$select_all %% 2 == 0){
updateCheckboxGroupInput(session=session, inputId="show_vars",
choices = c(names(df)),
selected = c(names(df)))
}
else {
updateCheckboxGroupInput(session=session, inputId="show_vars",
choices = c(names(df)),
selected = "")
}}
})
observe({
if (input$reset > 1) {
updateCheckboxGroupInput(session=session, inputId="show_vars",
choices = c(names(df)),
selected = selected_cols)
}
})
}
)
}
app_ui <- function() {
fluidPage(
titlePanel("Explore, Select, Download and Plot your search of clinicaltrials.gov",
windowTitle = "Data Explorer"),
tabsetPanel(id = "panels",
tabPanel("Data Table",
fluidRow(
column(2,
# Module 1
col_select_ui(id = "col_select", df = df, selected_cols = selected_cols)))
)
)
)
}
app_server <- function(input, output, session) {
# We are now calling the module server functions
# on a given id that matches the one from the UI
col_select_server(id = "col_select", df = df, selected_cols = selected_cols)
}
shinyApp(app_ui, app_server)
shinyApp(app_ui, app_server)
shinyApp(app_ui, app_server)
app_ui <- function() {
fluidPage(
titlePanel("Explore, Select, Download and Plot your search of clinicaltrials.gov",
windowTitle = "Data Explorer"),
tabsetPanel(id = "panels",
tabPanel("Data Table",
fluidRow(
column(2,
# Module 1
col_select_ui(id = "col_select", df = df, selected_cols = selected_cols)))
)
)
)
}
app_server <- function(input, output, session) {
# We are now calling the module server functions
# on a given id that matches the one from the UI
col_select_server(id = "col_select", df = df, selected_cols = selected_cols)
}
shinyApp(app_ui, app_server)
library(devtools)
library(rctapi)
library(rctexplorer)
df <- get_study_fields("otosclerosis", fields = for_explorer, max_studies = 600)
View(df)
df <- set_app_input("otosclerosis",fields = for_explorer, max_studies = 600)
launch_explorer(df)
df <- set_app_input("psoriatric arthritis",fields = for_explorer, max_studies = 600)
df <- set_app_input("psoriatric arthritis",fields = for_explorer, max_studies = 600)
df <- set_app_input("psoriatic arthritis",fields = for_explorer, max_studies = 600)
View(df)
launch_explorer(df)
runApp('GitHub/rctexplorer/inst/app')
all_fields
df <- set_app_input("psoriatic arthritis",fields = all_fields, max_studies = 600)
launch_explorer(df)
library(devtools)
install_github("AdlCruz/rctapi")
install_github("AdlCruz/rctexplorer")
df <- set_app_input("psoriatic arthritis",fields = for_explorer, max_studies = 600)
library(rctapi)
library(rctexplorer)
df <- set_app_input("psoriatic arthritis",fields = for_explorer, max_studies = 600)
launch_explorer(df)
View(df)
runApp('GitHub/rctexplorer/inst/app')
runApp('GitHub/rctexplorer/inst/app')
library(rctapi)
all_fields
af <- get_fields("heart", for_explorer)
af <- get_fields("heart", for_explorer[1:20])
View(af)
library(devtools)
setwd("~/GitHub/rctapi")
dodument()
document()
af <- get_study_fields("heart", for_explorer, response_content = T )
library(rctexplorer)
